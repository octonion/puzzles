

# This file was *autogenerated* from the file josephus.sage
from sage.all_cmdline import *   # import sage library

_sage_const_50 = Integer(50); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
# Random Josephus problem

# p[i,j] is the probability that starting with i people,
# the person in position j is the final survivor.
# Note the first person to go is in position 1.

# The recursive relation is:

# p[i,j] = (j-2)/(i-1)*p[i-1,j-2] + (i-j)/(i-1)*p[i-1,j-1]

# For person j to be the final survivor after person 1 goes,
# either someone before them in the order was killed (positions
# 2..(j-1)), which occurs with probability (j-2)/(i-1), or someone
# after them in the order was killed (positions (j+1)..i), which
# occurs with probability (i-j)/(i-1).

# If someone among positions 2..(j-1) was killed, the next person
# to go puts the person originally in position j in position j-2.

# If someone among positions (j+1)..i was killed, the next person
# to go puts the person originally in position j in position j-1.

n = _sage_const_50 

p = matrix(QQ, matrix.zero(n))
p[_sage_const_1 ,_sage_const_1 ] = _sage_const_1 

for i in range(_sage_const_2 ,n):
    p[i,_sage_const_1 ] = p[i-_sage_const_1 ,i-_sage_const_1 ]
    for j in range(_sage_const_2 ,i+_sage_const_1 ):
        p[i,j] = (j-_sage_const_2 )/(i-_sage_const_1 )*p[i-_sage_const_1 ,j-_sage_const_2 ] + (i-j)/(i-_sage_const_1 )*p[i-_sage_const_1 ,j-_sage_const_1 ]

# print out all p[i,j] values

print()

for i in range(_sage_const_1 ,n):
    for j in range(_sage_const_1 ,i+_sage_const_1 ):
        print(i,j,p[i,j].n())

# print out (i,j) pairs with maximum survival probability.

print()

for i in range(_sage_const_1 ,n):
    m = _sage_const_1 
    mv = p[i,_sage_const_1 ]
    for j in range(_sage_const_1 ,i+_sage_const_1 ):
        if p[i,j] > mv:
            mv = p[i,j]
            m = j
    print(i,m,mv.n())

