

# This file was *autogenerated* from the file penney.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2)
def seq_p(seq):
    p = _sage_const_1 
    for s in seq:
        p *= symbol_p[s]
    return(p)

var('p q')
symbol_p = {}
symbol_p['H'] = p
symbol_p['T'] = q

seq = ['THH','HTH','HHT']

n = len(seq)

A = zero_matrix(SR,n)

for i in range(_sage_const_0 ,n):
    for j in range(_sage_const_0 ,n):
        l = min(len(seq[i]),len(seq[j]))
        for k in range(_sage_const_1 ,l+_sage_const_1 ):
            #print(k,seq[j][0:k],seq[i][-k:])
            if (seq[i][_sage_const_0 :k]==seq[j][-k:]):
                A[i,j] += _sage_const_1 /seq_p(seq[i][_sage_const_0 :k])

D = zero_vector(SR, n)
for i in range(_sage_const_0 ,n):
    B = copy(A)
    B[:,i] = ones_matrix(n,_sage_const_1 )
    D[i] = det(B)

s = sum(D)

P = zero_vector(SR, n)
for i in range(_sage_const_0 ,n):
    P[i] = D[i]/s

print(P)
print()
print(P.subs({p:_sage_const_1 /_sage_const_2 , q:_sage_const_1 /_sage_const_2 }))

