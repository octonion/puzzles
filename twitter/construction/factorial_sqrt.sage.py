

# This file was *autogenerated* from the file factorial_sqrt.sage
from sage.all_cmdline import *   # import sage library

_sage_const_20000 = Integer(20000); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_9 = Integer(9)
from collections import deque

bound = _sage_const_20000 

queue = deque()
queue.append(_sage_const_3 )

found = {_sage_const_3 }
paths = {_sage_const_3  : _sage_const_3 }
sqrts = {_sage_const_3  : _sage_const_0 }

while (len(queue)> _sage_const_0 ):
    m = queue.pop()
    n = factorial(m).n()
    i = _sage_const_0 
    while (floor(n)>_sage_const_3 ):
        if (n<bound) and not(floor(n) in found):
            found.add(floor(n))
            queue.appendleft(floor(n))
            paths[floor(n)] = m
            sqrts[floor(n)] = i
        n = sqrt(n)
        i += _sage_const_1 
print(sorted(found))

v = _sage_const_9 
while not(v==_sage_const_3 ):
    w = paths[v]
    print("{} <- {}! + {} sqrt".format(v,w,sqrts[v]))
    v = w

